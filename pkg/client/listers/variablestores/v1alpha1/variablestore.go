/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vincentpli/cel-tekton/pkg/apis/variablestores/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VariableStoreLister helps list VariableStores.
// All objects returned here must be treated as read-only.
type VariableStoreLister interface {
	// List lists all VariableStores in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VariableStore, err error)
	// VariableStores returns an object that can list and get VariableStores.
	VariableStores(namespace string) VariableStoreNamespaceLister
	VariableStoreListerExpansion
}

// variableStoreLister implements the VariableStoreLister interface.
type variableStoreLister struct {
	indexer cache.Indexer
}

// NewVariableStoreLister returns a new VariableStoreLister.
func NewVariableStoreLister(indexer cache.Indexer) VariableStoreLister {
	return &variableStoreLister{indexer: indexer}
}

// List lists all VariableStores in the indexer.
func (s *variableStoreLister) List(selector labels.Selector) (ret []*v1alpha1.VariableStore, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VariableStore))
	})
	return ret, err
}

// VariableStores returns an object that can list and get VariableStores.
func (s *variableStoreLister) VariableStores(namespace string) VariableStoreNamespaceLister {
	return variableStoreNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VariableStoreNamespaceLister helps list and get VariableStores.
// All objects returned here must be treated as read-only.
type VariableStoreNamespaceLister interface {
	// List lists all VariableStores in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VariableStore, err error)
	// Get retrieves the VariableStore from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VariableStore, error)
	VariableStoreNamespaceListerExpansion
}

// variableStoreNamespaceLister implements the VariableStoreNamespaceLister
// interface.
type variableStoreNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VariableStores in the indexer for a given namespace.
func (s variableStoreNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VariableStore, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VariableStore))
	})
	return ret, err
}

// Get retrieves the VariableStore from the indexer for a given namespace and name.
func (s variableStoreNamespaceLister) Get(name string) (*v1alpha1.VariableStore, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("variablestore"), name)
	}
	return obj.(*v1alpha1.VariableStore), nil
}
